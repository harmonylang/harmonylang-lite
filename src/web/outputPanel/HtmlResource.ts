export const PANEL_HTML = "<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Harmony Output<\/title>\n    <link rel=\"stylesheet\" href=\"https:\/\/unpkg.com\/purecss@2.0.3\/build\/pure-min.css\"\n          integrity=\"sha384-cg6SkqEOCV1NbJoCu11+bm0NvBRc8IYLRGXkmNrqUBfTjmMYwNKPWBTIKyw9mHNJ\" crossorigin=\"anonymous\">\n    <link rel=\"stylesheet\" href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/font-awesome\/5.15.1\/css\/all.min.css\"\n          integrity=\"sha512-+4zCK9k+qNFUR5X+cKL9EIR+ZOhtIloNl9GIKS57V1MyNsYpYcUrUeQc9vNfzsWfV28IaLL3i96P9sdNyeRssA==\"\n          crossorigin=\"anonymous\" \/>\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\" \/>\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Source+Code+Pro:wght@300;400;500;600&display=swap\"\n          rel=\"stylesheet\" \/>\n    <style type=\"text\/css\">\n        body {\n            background-color: #1e1e1e;\n            color: #fff;\n        }\n\n        h2 {\n            font-family: \'Source Code Pro\', monospace;\n            font-size: 13pt;\n        }\n\n        #process-window {\n            position: fixed;\n            bottom: 0%;\n            right: 0px;\n            left: 0px;\n            width: 100%;\n            height: 40%;\n        }\n\n        #processes {\n            position: relative;\n            padding-top: 1rem;\n            height: calc(100% - 4rem);\n        }\n\n        .process-labels {\n            height: 100%;\n        }\n\n        .process-label-row {\n            background-color: #252525;\n            height: 3rem;\n            width: 100%;\n        }\n\n        .process-label-text {\n            margin-top: 0;\n            margin-bottom: 0;\n            padding-left: 1rem;\n            line-height: 3rem;\n            font-weight: 600;\n        }\n\n        .process-bars {\n            position: absolute;\n            top: 0;\n            padding-top: 1rem;\n            left: 20.83333%;\n            bottom: 0;\n            overflow-x: scroll;\n            overflow-y: visible;\n        }\n\n        .process-bar-row {\n            margin-top: 0.5rem;\n            margin-bottom: 1rem;\n            padding-left: 12px;\n            padding-right: 1rem;\n            width: fit-content;\n        }\n\n        .process-bar {\n            position: relative;\n            background: #323232;\n            border-radius: 5px;\n            height: 2rem;\n        }\n\n        .process-block {\n            position: absolute;\n            border: 2px solid rgba(255, 255, 255, 0.2);\n            border-radius: 5px;\n            height: 2rem;\n        }\n\n        .seekbar-button {\n            background: #252525;\n            color: #fff;\n            width: 2.5rem;\n            height: 2.5rem;\n            margin-top: .25rem;\n            margin-bottom: .25rem;\n            margin-left: .25rem;\n        }\n\n        .seekbar-time {\n            margin-top: 0;\n            margin-bottom: 0;\n            padding-left: 1rem;\n            padding-right: 1rem;\n            letter-spacing: normal;\n            line-height: 3rem;\n            font-weight: 600;\n        }\n\n        #seekbar-div {\n            background-color: #3c3c3c;\n            position: relative;\n            top: 0%;\n            width: 100%;\n            height: 3rem;\n        }\n\n        #time-slider {\n            flex-grow: 1;\n            margin-top: 1rem;\n            margin-bottom: 1rem;\n        }\n\n        #time-slider:focus {\n            outline: none;\n        }\n\n        #issue-box {\n            display: flex;\n            height: 2.5rem;\n            line-height: .7rem;\n            margin-top: 1rem;\n            align-items: center;\n            justify-content: center;\n        }\n\n        #issue-box-container {\n            height: 5%;\n        }\n\n        #all-code {\n            height: 40%\n        }\n\n        #shared-var-table {\n            overflow-y: auto;\n            height: calc(100% - 20px - 14pt);\n        }\n\n        details {\n            font: 20px Calibri;\n        }\n\n        #shared-variables {\n            height: calc(55% - 40px - 23pt);\n            margin-top: calc(20px + 15pt);\n        }\n\n        #stack-trace-table {\n            overflow: scroll;\n            height: 100%;\n            border: none;\n            padding: 1rem;\n        }\n\n        #overlay {\n            position: fixed; \/* Sit on top of the page content *\/\n            \/* display: none; \/* Hidden by default *\/\n            width: 100%; \/* Full width (cover the whole page) *\/\n            height: 100%; \/* Full height (cover the whole page) *\/\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: #1e1e1e;\n            transition: opacity 1s ease-in-out;\n            z-index: 2; \/* Specify a stack order in case you\'re using a different order for other elements *\/\n        }\n\n        #harmonyLangIcon {\n            position: absolute;\n            top: calc(50% - 10rem);\n            left: calc(50% - 4rem);\n            width: 8rem;\n            height: 8rem;\n        }\n\n        #loader {\n            position: absolute;\n            top: calc(50%);\n            left: calc(50% - 2rem - 10px);\n            border: 8px solid #00000000;\n            border-radius: 50%;\n            border-top: 8px solid #E7E7E7;\n            border-bottom: 8px solid #E7E7E7;\n            width: 4rem;\n            height: 4rem;\n            display: none;\n            -webkit-animation: spin 2s linear infinite;\n            animation: spin 2s linear infinite;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        #overlay-text {\n            position: absolute;\n            top: calc(50% + 6rem);\n            left: calc(50% - 10rem);\n            width: 20rem;\n            display: none;\n            text-align: center;\n            transition: all 0.3s ease-in-out;\n        }\n\n        details>summary {\n            font-family: \"Courier New\", Courier, monospace;\n            color: white;\n            padding: 2px 6px;\n            width: 15em;\n            \/*background-color: lightblue;*\/\n            border: none;\n            \/*box-shadow: 3px 3px 4px green;*\/\n            cursor: pointer;\n            transition: color 1s;\n        }\n\n        details>p {\n            font-family: \"Courier New\", Courier, monospace;\n            color: white;\n            padding: 2px 6px;\n            width: 15em;\n            margin-top: 2px;\n            margin-bottom: 2px;\n            margin-left: 40px;\n        }\n\n        details>* {\n            margin-left: 20px;\n        }\n\n        details[open]>summary {\n            color: #a3a3ff;\n        }\n\n        #data-window {\n            position: absolute;\n            height: 60%;\n            width: 100%;\n            left: 0;\n        }\n\n        #separator {\n            cursor: row-resize;\n            background-color: #b1b1b1;\n            background-image: url(\"data:image\/svg+xml;utf8,<svg xmlns=\'http:\/\/www.w3.org\/2000\/svg\' width=\'20\' height=\'20\'><path d=\'M0 6 h20 M0 10 h20 M0 14 h20\' fill=\'none\' stroke=\'black\'\/><\/svg>\");\n            background-repeat: no-repeat;\n            background-position: center;\n            width: 100%;\n            height: 18px;\n\n            \/* Prevent the browser\'s built-in drag from interfering *\/\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n        }\n    <\/style>\n<\/head>\n\n<body>\n<div id=\"overlay\">\n    <svg id=\"harmonyLangIcon\" viewBox=\"0 0 264 264\" fill=\"none\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\n        <g filter=\"url(#filter0_d_unscrew)\">\n            <rect x=\"4\" width=\"256\" height=\"256\" rx=\"10\" fill=\"#FFEBEE\"\/>\n        <\/g>\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M242.446 20.3866C242.446 19.2821 241.55 18.3866 240.446 18.3866L22.0914 18.3866C20.9869 18.3866 20.0914 19.2821 20.0914 20.3866L20.0914 22.0441C20.0914 23.1487 20.9869 24.0441 22.0914 24.0441L125.892 24.0441C115.032 28.6889 107.598 36.6686 106.622 44.9291C106.48 45.2036 106.4 45.5151 106.4 45.8452V63.6463L22.0914 63.6463C20.9869 63.6463 20.0914 64.5417 20.0914 65.6463L20.0914 67.3038C20.0914 68.4083 20.9869 69.3038 22.0914 69.3038L106.4 69.3038V108.906H22.0914C20.9869 108.906 20.0914 109.801 20.0914 110.906L20.0914 112.563C20.0914 113.668 20.9869 114.563 22.0914 114.563L106.4 114.563V154.166H22.0914C20.9869 154.166 20.0914 155.061 20.0914 156.166L20.0914 157.823C20.0914 158.928 20.9869 159.823 22.0914 159.823H106.4V199.425H22.0914C20.9869 199.425 20.0914 200.321 20.0914 201.425L20.0914 203.083C20.0914 204.187 20.9869 205.083 22.0914 205.083H106.4V249.757C106.4 250.861 107.295 251.757 108.4 251.757H110.251C111.356 251.757 112.251 250.861 112.251 249.757V205.083L240.446 205.083C241.55 205.083 242.446 204.187 242.446 203.083V201.425C242.446 200.321 241.55 199.425 240.446 199.425L112.251 199.425V172.084C119.303 178.403 131.962 181.173 145.321 178.445C158.614 175.73 168.997 168.307 172.848 159.823H240.446C241.55 159.823 242.446 158.928 242.446 157.823V156.166C242.446 155.061 241.55 154.166 240.446 154.166H174.398C174.548 152.59 174.462 151.006 174.119 149.434C171.447 137.206 154.222 130.368 135.646 134.162C125.725 136.188 117.425 140.837 112.251 146.592V114.563L240.446 114.563C241.55 114.563 242.446 113.668 242.446 112.563V110.906C242.446 109.801 241.55 108.906 240.446 108.906H155.164C168.209 103.3 176.286 92.8794 174.119 82.9588C172.781 76.8367 167.796 72.0658 160.819 69.3038L240.446 69.3038C241.55 69.3038 242.446 68.4084 242.446 67.3038V65.6463C242.446 64.5417 241.55 63.6463 240.446 63.6463L151.475 63.6463C166.659 58.5383 176.498 47.1135 174.133 36.2849C173.001 31.1042 169.257 26.8911 163.904 24.0441L240.446 24.0441C241.55 24.0441 242.446 23.1487 242.446 22.0441V20.3866ZM120.081 63.6463C117.045 62.4351 114.39 60.8423 112.251 58.9226V63.6463H120.081ZM112.251 69.3038V80.1171C116.334 75.5753 122.365 71.7223 129.602 69.3038H112.251ZM117.016 108.906H112.251V105.609C113.636 106.85 115.237 107.954 117.016 108.906Z\" fill=\"#212121\"\/>\n        <defs>\n            <filter id=\"filter0_d_unscrew\" x=\"0\" y=\"0\" width=\"264\" height=\"264\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\">\n                <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\/>\n                <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\/>\n                <feOffset dy=\"4\"\/>\n                <feGaussianBlur stdDeviation=\"2\"\/>\n                <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\"\/>\n                <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\"\/>\n                <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\"\/>\n            <\/filter>\n        <\/defs>\n    <\/svg>\n    <div id=\"loader\"><\/div>\n    <h2 id=\"overlay-text\">&nbsp;Harmony is processing...<\/h2>\n<\/div>\n<div id=\"data-window\" class=\"pure-g\">\n    <table class=\"pure-u-1-2 pure-table\" id=\"stack-trace-table\"><\/table>\n    <div class=\"pure-u-1-2\" style=\"height: 100%; background-color: #1e1e1e\">\n        <div id=\"issue-box-container\">\n            <div id=\"issue-box\">\n                <div style=\"order: 1; padding-left: 10px; padding-right: 10px; background-color: #252526\">\n                    <h2 style=\"color: #ffffff\">Issue<\/h2>\n                <\/div>\n                <div style=\"order: 5; padding-left: 10px; padding-right: 10px; background-color: #3C3C3C\">\n                    <h2 id=\"issue-value\" style=\"color: #F44336\">None<\/h2>\n                <\/div>\n            <\/div>\n        <\/div>\n        <div id=\"all-code\">\n            <h2 style=\"background-color: #3c3c3c; padding: 10px; margin-bottom: 0px;\">Assembly<\/h2>\n            <div style=\"height:100%; overflow:auto;\">\n                <table id=\"code-table\"><\/table>\n            <\/div>\n        <\/div>\n        <div id=\"shared-variables\">\n            <h2 style=\"background-color: #3c3c3c; padding: 10px; margin-bottom: 0px;\">Shared Variables<\/h2>\n            <div id=\"shared-var-table\"><\/div>\n        <\/div>\n    <\/div>\n<\/div>\n<div id=\"process-window\" style=\"background-color: #1e1e1e\">\n    <div id=\"separator\"><\/div>\n    <div class=\"pure-g\" id=\"seekbar-div\">\n        <button class=\"pure-button seekbar-button\" style=\"margin-left: 1rem\" id=\"button-back\">\n            <i class=\"fas fa-chevron-left\"><\/i>\n        <\/button>\n        <button class=\"pure-button seekbar-button\" id=\"button-play\">\n            <i class=\"fas fa-play\"><\/i>\n        <\/button>\n        <button class=\"pure-button seekbar-button\" style=\"margin-right: 1rem;\" id=\"button-forward\">\n            <i class=\"fas fa-chevron-right\"><\/i>\n        <\/button>\n        <p class=\"seekbar-time\" id=\"start-time\">00:08:32<\/p>\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"0\" id=\"time-slider\">\n        <p class=\"seekbar-time\" id=\"end-time\">00:42:03<\/p>\n    <\/div>\n    <div class=\"pure-g\" id=\"processes\">\n        <div class=\"pure-u-5-24 process-labels\" id=\"process-labels\"><\/div>\n        <div class=\"pure-u-19-24 process-bars\" id=\"process-bars\">\n            <div id=\"process-slider\"\n                 style=\"width: 24px; height: 100%; position: absolute; top: 0; overflow: hidden; z-index: 1;\">\n                <svg width=\"24\" height=\"1800\" viewBox=\"0 0 16 1200\" fill=\"none\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\n                    <g filter=\"url(#filter0_d)\">\n                        <line x1=\"8\" y1=\"1200\" x2=\"8.00003\" y2=\"2.00006\" stroke=\"#E0E0E0\" stroke-width=\"2\" \/>\n                    <\/g>\n                    <g filter=\"url(#filter1_d)\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\"\n                              d=\"M12 3C12 1.89543 11.1046 1 10 1H6C4.89543 1 4 1.89543 4 3V8.39445C4 8.7893 4.11688 9.17531 4.3359 9.50385L6.33591 12.5039C7.12755 13.6913 8.87247 13.6913 9.66411 12.5038L11.6641 9.50385C11.8831 9.17531 12 8.7893 12 8.39445V3Z\"\n                              fill=\"#E0E0E0\" \/>\n                    <\/g>\n                    <circle cx=\"8\" cy=\"8\" r=\"2\" fill=\"#C4C4C4\" \/>\n                    <defs>\n                        <filter id=\"filter0_d\" x=\"3\" y=\"6.10352e-05\" width=\"10\" height=\"608\" filterUnits=\"userSpaceOnUse\"\n                                color-interpolation-filters=\"sRGB\">\n                            <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" \/>\n                            <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" \/>\n                            <feOffset dy=\"2\" \/>\n                            <feGaussianBlur stdDeviation=\"2\" \/>\n                            <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\" \/>\n                            <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\" \/>\n                            <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\" \/>\n                        <\/filter>\n                        <filter id=\"filter1_d\" x=\"0\" y=\"1\" width=\"16\" height=\"20.3944\" filterUnits=\"userSpaceOnUse\"\n                                color-interpolation-filters=\"sRGB\">\n                            <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" \/>\n                            <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" \/>\n                            <feOffset dy=\"4\" \/>\n                            <feGaussianBlur stdDeviation=\"2\" \/>\n                            <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\" \/>\n                            <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\" \/>\n                            <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\" \/>\n                        <\/filter>\n                    <\/defs>\n                <\/svg>\n            <\/div>\n        <\/div>\n    <\/div>\n<\/div>\n<\/body>\n\n<script>\n    const BAR_LEN_FACTOR = 5;\n    const PLAY_SPEED = 200;\n    const COLOR_MAP = [\'#c62828\', \'#AD1457\', \'#6A1B9A\', \'#4527A0\', \'#283593\', \'#1565C0\', \'#0277BD\', \'#00838F\',\n        \'#00695C\', \'#2E7D32\', \'#558B2F\', \'#9E9D24\', \'#F9A825\', \'#FF8F00\', \'#EF6C00\', \'#D84315\', \'#4E342E\',\n        \'#424242\', \'#37474F\'\n    ];\n\n    \/**\n     * Current time of the visualizer\n     * @type number\n     *\/\n    let time = 0;\n    let maxTime = 0;\n    let processLengthPx = 0;\n\n    \/**\n     * @type CharmonyTopLevel\n     *\/\n    let harmonyData;\n\n    let timeStartText;\n    let timeEndText;\n    let timeSlider;\n    let playButton;\n    let backButton;\n    let forwardButton;\n\n    let processLabels;\n    let processBars;\n    let processSlider;\n\n    let playTimer;\n    let playing = false;\n\n    let codeTable;\n    let sharedVariableTable;\n    let stackTraceTable;\n\n    let issueDisplay;\n\n    let overlay;\n    let overlayLoader;\n    let overlayText;\n\n    let vscode;\n\n    document.addEventListener(\'DOMContentLoaded\', () => {\n        timeStartText = document.getElementById(\"start-time\");\n        timeEndText = document.getElementById(\"end-time\");\n        timeSlider = document.getElementById(\"time-slider\");\n        playButton = document.getElementById(\"button-play\");\n        backButton = document.getElementById(\"button-back\");\n        forwardButton = document.getElementById(\"button-forward\");\n        processBars = document.getElementById(\"process-bars\");\n        processLabels = document.getElementById(\"process-labels\");\n        processSlider = document.getElementById(\"process-slider\");\n        codeTable = document.getElementById(\"code-table\");\n        sharedVariableTable = document.getElementById(\"shared-var-table\");\n        stackTraceTable = document.getElementById(\"stack-trace-table\");\n        issueDisplay = document.getElementById(\"issue-value\");\n        overlay = document.getElementById(\"overlay\");\n        overlayLoader = document.getElementById(\"loader\");\n        overlayText = document.getElementById(\"overlay-text\");\n    });\n\n    \/**\n     * This function initializes the state and callback functions for the resize\n     * bar. This is done by modifying the height attribute of the process window\n     * in response to the bar being dragged.\n     * Source: https:\/\/stackoverflow.com\/a\/55202728\n     *\/\n    function initResizeBar()\n    {\n        let   mouseDetails; \/\/ remember mouse down info\n        const resizeBar = document.getElementById(\"separator\");\n        const resizeBarHeight = resizeBar.clientHeight;\n        const processWindow = document.getElementById(\"process-window\");\n        const dataWindow = document.getElementById(\"data-window\");\n\n        resizeBar.onmousedown = onMouseDown;\n        function onMouseDown(e)\n        {\n            mouseDetails = {\n                e,\n                initialHeight: processWindow.offsetHeight\n            };\n            document.onmousemove = onMouseMove;\n            document.onmouseup = () => {\n                document.onmousemove = document.onmouseup = null;\n            }\n        }\n        function onMouseMove(e) {\n            const deltaY = e.clientY - mouseDetails.e.clientY;\n            const documentHeight = getDocumentHeight();\n\n            const newHeight = fitInBounds(mouseDetails.initialHeight - deltaY, resizeBarHeight, documentHeight);\n            console.log(\"Body Height\", documentHeight);\n            const heightPercentage = (newHeight \/ documentHeight) * 100;\n            dataWindow.style.height = (100 - heightPercentage).toString() + \'%\';\n            processWindow.style.height = heightPercentage.toString() + \'%\';\n            console.log(dataWindow, dataWindow.style.height);\n        }\n    }\n\n    \/**\n     * Inserts a code block into the code table.\n     * @param {CharmonyExecutedCode} block\n     *\/\n    function insertCodeBlock(block) {\n        const {line, file, sourceCode, initialPc} = block;\n        const header = `<span style=\"color: #A5D6A7\">${file}<span>: <span style=\"color: #788585\">${line} ${sourceCode}<\/span>`\n        const emptyCell = makeTableCell();\n        const contentCell = makeTableCell(header);\n        contentCell.style.fontFamily = \'\"Courier New\", Courier, monospace\';\n        const tableRow = makeTableRow(emptyCell, contentCell);\n        codeTable.appendChild(tableRow);\n\n        const firstPc = initialPc;\n        block.assembly.forEach((c, idx) => {\n            const {assembly, explain} = c;\n            const pc = idx + firstPc;\n            const pcCell = makeTableCell(pc);\n            pcCell.style.fontFamily = \'\"Courier New\", Courier, monospace\';\n            pcCell.style.color = \'#788585\';\n            const codeCell = makeTableCell(`<span title=\"${explain}\">${assembly}<\/span>`);\n            codeCell.style.fontFamily = \'\"Courier New\", Courier, monospace\';\n            codeCell.style.color = \'#E7E7E7\'\n            const tableRow = makeTableRow(pcCell, codeCell);\n            tableRow.setAttribute(\"id\", `code-pc-${pc}`);\n            codeTable.appendChild(tableRow);\n        });\n    }\n\n    \/**\n     * Creates an html-tag string which is customized for colors based on\n     * the type of the given value.\n     *\/\n    function createHtmlValue(v) {\n        const typeofV = typeof v;\n        const create = (color, value) => `<span style=\"color: ${color}\">${value}<\/span>`;\n        if (typeofV === \"string\") {\n            if (v.startsWith(\"?\")) {\n                return create(\"#ed85ff\", `${v}`);\n            } else {\n                return create(\"#bc6021\", `\"${v}\"`);\n            }\n        }\n        if (typeofV === \"boolean\" || typeofV === \"number\") {\n            const s = v.toString()\n            return create(\"#24a583\", s[0].toUpperCase() + s.substring(1));\n        }\n        if (v == null) {\n            return create(\"#a01c1c\", \'None\');\n        } else {\n            return create(\"#ffffff\", JSON.stringify(v));\n        }\n    }\n    \/**\n     * Creates a collapseable html entry that represents the values in the\n     * given object.\n     * @param {string} summary\n     * @param {Record<string, unknown>} obj\n     *\/\n    function makeCollapseable(summary, obj) {\n        const collapseable = document.createElement(\"details\");\n        const summaryElement = document.createElement(\"summary\");\n        summaryElement.innerText = summary;\n        summaryElement.style.fontSize = \"15px\";\n        collapseable.appendChild(summaryElement);\n        Object.entries(obj).forEach(([k, v]) => {\n            if (v == null || typeof v !== \'object\') {\n                const p = document.createElement(\"p\");\n                p.innerHTML = `${k}: ${createHtmlValue(v)}`;\n                p.style.fontSize = \"15px\";\n                collapseable.appendChild(p);\n            } else {\n                const header = Array.isArray(v) ? \"[Array]\" : \"[object Object]\"\n                const subcollapseable = makeCollapseable(`${k}: ${header}`, v);\n                collapseable.appendChild(subcollapseable);\n            }\n        });\n        collapseable.setAttribute(\"open\", \"true\");\n        return collapseable;\n    }\n\n    \/**\n     * Displays the shared variables on the the current state.\n     *\/\n    let lastSlice = null;\n\n    \/**\n     * @param {Record<string, unknown>} slice\n     *\/\n    function setSharedVariablesTable(slice) {\n        if (slice === lastSlice) return;\n        const collapseable = makeCollapseable(\"Shared Variables\", slice);\n        while (sharedVariableTable.firstChild != null) sharedVariableTable.removeChild(sharedVariableTable.firstChild);\n        sharedVariableTable.appendChild(collapseable);\n        lastSlice = slice;\n    }\n\n    \/**\n     * Scrolls the code-table to the given pc and highlights that line of code.\n     *\/\n    let lastHighlighted = null;\n\n    \/**\n     * @param {number} pc\n     *\/\n    function moveAndHighlightCode(pc) {\n        if (lastHighlighted != null) {\n            const line = document.getElementById(`code-pc-${lastHighlighted}`)\n            line.style.backgroundColor = \"\";\n        }\n        const line = document.getElementById(`code-pc-${pc}`)\n        line.style.backgroundColor = \"rgba(0, 255, 255, 0.2)\";\n        lastHighlighted = pc;\n        line.scrollIntoView();\n    }\n\n    \/**\n     * Initializes the window and displays the execution [data] about the program.\n     * See the _loadData() function in src\/outputPanel.ts for the data given\n     * to initialize the window.\n     * @param {CharmonyTopLevel} data\n     *\/\n    function initWindow(data) {\n        harmonyData = data;\n        initResizeBar();\n\n        \/\/ Get all process names in order\n        let totalDuration = 0;\n        let processObjects = new Map();\n\n        if (data.issue != null) {\n            issueDisplay.textContent = data.issue;\n        }\n\n        \/\/ GOOD\n        data.executedCode.forEach(block => {\n            console.log(block);\n            insertCodeBlock(block);\n        });\n\n        \/\/ Builds the process blocks on the bottom.\n        \/\/ For each macro-step.\n        data.macroSteps.forEach(mas => {\n            const {tid, name, startSliceIdx, lastSliceIdx} = mas;\n            if (!processObjects.has(tid)) {\n                \/\/ Label Generation\n                const labelContainer = document.createElement(\"div\");\n                labelContainer.setAttribute(\'class\', \'process-label-row\');\n                const label = document.createElement(\'p\');\n                label.setAttribute(\'class\', \'process-label-text\');\n                label.textContent = name;\n\n                labelContainer.appendChild(label);\n                processLabels.appendChild(labelContainer);\n\n                \/\/ Row Generation\n                const row = document.createElement(\"div\");\n                row.setAttribute(\'class\', \'process-bar-row\');\n                const bar = document.createElement(\"div\");\n                bar.setAttribute(\'class\', \"process-bar\");\n                row.appendChild(bar);\n                processObjects.set(tid, bar);\n                processBars.appendChild(row);\n            }\n\n            const processBar = processObjects.get(tid);\n\n            for (let i = startSliceIdx; i < lastSliceIdx; i++) {\n                const s = data.slices[i];\n                const processBlock = document.createElement(\"div\");\n                processBlock.setAttribute(\'class\', \'process-block\');\n                processBlock.style.left = `${totalDuration \/ BAR_LEN_FACTOR}rem`;\n                processBlock.style.width = `${s.duration \/ BAR_LEN_FACTOR}rem`;\n                processBlock.style.cursor = \"pointer\";\n                const currentTime = totalDuration;\n                processBlock.addEventListener(\"click\", e => {\n                    e.preventDefault();\n                    updateWindow(currentTime);\n                })\n                \/\/ processBlock.style.border = \"2px solid rgb(255, 255, 255, 0.2)\";\n                processBar.appendChild(processBlock);\n                totalDuration += s.duration;\n            }\n        });\n        maxTime = totalDuration;\n\n        let processNum = 0;\n        processObjects.forEach((processBar) => {\n            processBar.style.width = `${maxTime \/ BAR_LEN_FACTOR}rem`;\n            const blocks = processBar.childNodes;\n            blocks.forEach((block) => {\n                block.style.background = COLOR_MAP[processNum % COLOR_MAP.length];\n            });\n            processNum++;\n        });\n        processLengthPx = convertRemToPixels(maxTime \/ BAR_LEN_FACTOR);\n\n        timeSlider.max = maxTime;\n        timeEndText.innerHTML = timeFormat(maxTime);\n\n        timeSlider.addEventListener(\'input\', (e) => {\n            e.preventDefault();\n            updateWindow(timeSlider.value);\n        }, false);\n\n        playButton.addEventListener(\'click\', (e) => {\n            e.preventDefault();\n            if (playing) {\n                window.clearInterval(playTimer);\n                playButton.firstElementChild.setAttribute(\'class\', \'fas fa-play\');\n                playing = false;\n            } else {\n                playTimer = window.setInterval(playExecution, PLAY_SPEED);\n                playButton.firstElementChild.setAttribute(\'class\', \'fas fa-pause\');\n                playing = true;\n            }\n        }, false);\n\n        forwardButton.addEventListener(\'click\', (e) => {\n            e.preventDefault();\n            if (time < maxTime) {\n                updateWindow(time + 1);\n            }\n        }, false);\n\n        backButton.addEventListener(\'click\', (e) => {\n            e.preventDefault();\n            if (time > 0) {\n                updateWindow(time - 1);\n            }\n        }, false);\n        updateWindow(time);\n    }\n\n    \/**\n     * Plays the execution video. This is done by running this callback which increments\n     * the current time and other related visual properties. This is done until the\n     * time value reaches the maximum time.\n     *\n     * The function is wrapped in the playTimer function, which is the callback function\n     * used for setInterval and clearInterval.\n     *\/\n    function playExecution() {\n        if (time < maxTime) {\n            time++;\n        } else {\n            window.clearInterval(playTimer);\n            playButton.firstElementChild.setAttribute(\'class\', \'fas fa-play\');\n            playing = false;\n        }\n        updateWindow(time);\n    }\n\n    \/**\n     * Updates the current stack trace table\'s list of variables.\n     *\n     * @param {number} level A number denoting position of the corresponding stack trace scope on the table.\n     * @param {string} id The HTML id of the table cell which displays the variables, in the form `trace-variables-row-${row}`.\n     * @param {number} pid The id of the selected process in the stack.\n     * @param {number} time The time of the stack trace.\n     *\/\n    function showStackTraceVariables(level, id, pid, time) {\n        const slice = harmonyData.slices[harmonyData.microSteps[time].sliceIdx]\n\n        \/**\n         * @type CharmonyStackTrace\n         *\/\n        const stackTrace = slice.idToStackTrace[pid];\n        const trace = stackTrace.callStack[level];\n        const cell = document.getElementById(id);\n        while (cell.firstChild != null) cell.removeChild(cell.firstChild);\n        Object.entries(trace.vars).forEach(([name, value]) => {\n            const line = document.createElement(\"div\");\n            line.innerHTML = `${name} = ${createHtmlValue(value)}`;\n            cell.appendChild(line);\n        });\n    }\n\n    \/**\n     * Updates the stack trace table for a specific node.\n     * This will display all of the running\/blocked processes, as well as the stack for\n     * each of those processes at that point.\n     * @param {CharmonySlice} slice\n     *\/\n    function updateStackTrace(slice) {\n        console.log(\"Slice\", slice);\n        const tbl = stackTraceTable;\n        const traces = slice.idToStackTrace;\n        tbl.style.fontFamily = \'\"Courier New\", Courier, monospace\';\n\n        while (tbl.firstChild != null) tbl.removeChild(tbl.firstChild);\n        function buildHeader(...headers) {\n            const row = document.createElement(\"tr\");\n            headers.forEach(h => {\n                const header = document.createElement(\"th\");\n                header.innerText = h;\n                row.appendChild(header);\n            });\n            return row;\n        }\n        const header = buildHeader(\'Process\', \'Status\', \'Stack Trace\', \'Variables\');\n        tbl.appendChild(header);\n\n        Object.keys(traces).forEach((pid, rowNumber) => {\n            \/**\n             * @type CharmonyStackTrace\n             *\/\n            const traceData = traces[pid];\n            let processName = `${harmonyData.idToThreadName[pid]}`\n            const processCell = makeTableCell(processName);\n\n            const statusCell = document.createElement(\"td\");\n            statusCell.innerText = traceData.fullStatus;\n            switch (statusCell.innerText) {\n                case \"running\":\n                    statusCell.style.color = \"#30ea30\"; break;\n                case \"running atomic\":\n                    statusCell.style.color = \"#12dd96\"; break;\n                case \"runnable\":\n                    statusCell.style.color = \"#0b3fcf\"; break;\n                case \"failed\":\n                    statusCell.style.color = \"#d71616\"; break;\n                case \"blocked\":\n                    statusCell.style.color = \"#701f1f\"; break;\n                case \"terminated\":\n                    statusCell.style.color = \"#fff000\"; break;\n                case \"choosing\":\n                    statusCell.style.color = \"#19a7ee\"; break;\n                default:\n                    statusCell.style.color = \"#9b9b9b\"; break;\n            }\n            const variablesCell = makeTableCell();\n            const variableCellId = `trace-variables-row-${rowNumber}`;\n            variablesCell.id = variableCellId;\n\n            const stackTraceCell = makeTableCell();\n            traceData.callStack.forEach((stack, level) => {\n                const {method} = stack;\n                const line = document.createElement(\"div\");\n                line.innerHTML = `<span style=\"cursor: pointer; color: rgb(71,226,92); text-decoration: underline\" onclick=\"showStackTraceVariables(${level},\'${variableCellId}\', ${pid}, ${time});\">${method}<\/span>`\n                line.style.marginTop = \"1rem\";\n                line.style.marginBottom = \"1rem\";\n                stackTraceCell.appendChild(line);\n            });\n            if (traceData.failure != null) {\n                const line = document.createElement(\"div\");\n                line.innerText = traceData.failure;\n                line.style.color = \"#d71616\";\n                stackTraceCell.appendChild(line);\n            }\n            tbl.appendChild(makeTableRow(processCell, statusCell, stackTraceCell, variablesCell));\n            if (traceData.callStack.length > 0) {\n                showStackTraceVariables(0, variableCellId, pid, time);\n            }\n        });\n    }\n\n    \/**\n     * The primary function which updates the overall state of the window.\n     * @param {number} newTime\n     *\/\n    function updateWindow(newTime) {\n        if (newTime != null) {\n            time = newTime;\n        }\n        timeSlider.value = time;\n        timeStartText.innerHTML = timeFormat(time);\n        processSlider.style.left = `${convertRemToPixels(time \/ BAR_LEN_FACTOR)}px`;\n\n        const {\n            currentStep,\n            currentSlice,\n        } = getStateAtTime();\n        const {pc} = currentStep;\n        console.log(\"Highlight this PC\", pc);\n        moveAndHighlightCode(pc);\n        setSharedVariablesTable(currentSlice.sharedValues);\n        updateStackTrace(currentSlice);\n    }\n\n    \/**\n     * Returns the state of the program at the current time shown in the bottom progress bars.\n     * @return {{currentStep: CharmonyMicroStep, currentSlice: CharmonySlice}}\n     *\/\n    function getStateAtTime() {\n        const currentStep = harmonyData.microSteps[time];\n        const currentSlice = harmonyData.slices[currentStep.sliceIdx];\n        return {currentStep, currentSlice};\n    }\n\n    \/\/ Utility Functions\n\n    \/**\n     * Given the time in seconds, convert it to a readable string that shows the\n     * hours, minutes, and seconds. Each time unit value should be represented with\n     * two digits at minimum, e.g. 3 seconds should be displayed as \"03\".\n     * @param {number} t\n     * @return {string}\n     *\/\n    let timeFormat = (t) => {\n        let hours = Math.floor(t \/ 3600);\n        let minutes = Math.floor((t - (hours * 3600)) \/ 60);\n        let seconds = t - (hours * 3600) - (minutes * 60);\n\n        if (hours < 10) {\n            hours = \"0\" + hours;\n        }\n        if (minutes < 10) {\n            minutes = \"0\" + minutes;\n        }\n        if (seconds < 10) {\n            seconds = \"0\" + seconds;\n        }\n        return hours + \':\' + minutes + \':\' + seconds;\n    }\n\n    \/**\n     * @return {number}\n     *\/\n    function convertRemToPixels(rem) {\n        return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);\n    }\n\n    \/**\n     * Gets the height of the current document. Uses JQuery\'s implementation.\n     * @returns {number} A pixel measurement.\n     *\/\n    function getDocumentHeight() {\n        const body = document.body, html = document.documentElement;\n        return Math.max( body.scrollHeight, body.offsetHeight,\n                html.clientHeight, html.scrollHeight, html.offsetHeight);\n    }\n\n    \/**\n     * Fits the value in between a lower and upper bound.\n     * @param value The value to fit.\n     * @param min The lower bound.\n     * @param max The upper bound.\n     * @requires min <= max\n     * @returns {number} value if (min <= value <= max) else min if (value < min) else max if (value > max).\n     *\/\n    function fitInBounds(value, min, max) {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    const makeTableCell = (content) => {\n        const cell = document.createElement(\"td\");\n        if (content != null) {\n            cell.innerHTML = content;\n        }\n        return cell;\n    }\n    const makeTableRow = (...cells) => {\n        const tableRow = document.createElement(\"tr\");\n        if (cells != null) {\n            cells.forEach(c => {\n                tableRow.appendChild(c);\n            });\n        }\n        return tableRow;\n    }\n<\/script>\n\n<script>\n    \/**\n     * Listens for an event posted from either src\/outputPanel.ts or from\n     * src\/feature\/standaloneHtml.ts\n     *\/\n    window.addEventListener(\'message\', event => {\n        const {command, jsonData} = event.data; \/\/ The command and JSON data our extension sent\n        console.log(\"Hear message\", event.data)\n        switch (command) {\n            case \'load\':\n                overlay.addEventListener(\"transitionend\", () => {\n                    overlay.style.display = \"none\";\n                }, false);\n                overlay.style.opacity = 0;\n                initWindow(jsonData);\n                break;\n            case \'message\':\n                overlayLoader.style.display = \"none\";\n                overlayText.style.top = \"50%\";\n                overlayText.textContent = jsonData;\n                break;\n            case \'start\':\n                overlayLoader.style.display = \"block\";\n                overlayText.style.display = \"block\";\n                break;\n        }\n    });\n<\/script>\n\n<\/html>\n";